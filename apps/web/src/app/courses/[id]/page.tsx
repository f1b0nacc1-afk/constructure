'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '../../../components/ui';

interface CourseNode {
  id: string;
  title: string;
  type: 'lesson' | 'quiz' | 'assignment';
  description: string;
  position: { x: number; y: number };
}

interface Connection {
  id: string;
  from: string;
  to: string;
}

interface Course {
  id: string;
  title: string;
  description: string;
  createdAt: string;
  nodes: CourseNode[];
  connections: Connection[];
}

// –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å API)
const getCourseData = (courseId: string): Course => {
  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
  try {
    const savedCourse = localStorage.getItem(`course_${courseId}`);
    if (savedCourse) {
      const parsedCourse = JSON.parse(savedCourse);
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –∫—É—Ä—Å –∏–∑ localStorage –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', parsedCourse);
      return parsedCourse;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞ –∏–∑ localStorage:', error);
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const courses: Record<string, Course> = {
    '1': {
      id: '1',
      title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –í —ç—Ç–æ–º –∫—É—Ä—Å–µ –≤—ã –∏–∑—É—á–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —è–∑—ã–∫–∞ –∏ –Ω–∞—É—á–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.',
      createdAt: '2024-01-15',
      nodes: [
        {
          id: '1',
          title: '–£—Ä–æ–∫ 1: –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?',
          type: 'lesson',
          description: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
          position: { x: 100, y: 100 }
        },
        {
          id: '2',
          title: '–£—Ä–æ–∫ 2: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö',
          type: 'lesson',
          description: '–ò–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏',
          position: { x: 400, y: 100 }
        },
        {
          id: '3', 
          title: '–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –æ—Å–Ω–æ–≤',
          type: 'quiz',
          description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É',
          position: { x: 250, y: 250 }
        }
      ],
      connections: [
        { id: 'conn1', from: '1', to: '2' },
        { id: 'conn2', from: '2', to: '3' }
      ]
    },
    '2': {
      id: '2',
      title: '–û—Å–Ω–æ–≤—ã –¥–∏–∑–∞–π–Ω–∞',
      description: '–ü—Ä–∏–Ω—Ü–∏–ø—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏',
      createdAt: '2024-01-10',
      nodes: [
        {
          id: '1',
          title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –¥–∏–∑–∞–π–Ω',
          type: 'lesson',
          description: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–∏–∑–∞–π–Ω–∞',
          position: { x: 200, y: 100 }
        },
        {
          id: '2',
          title: '–¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–æ—Ä–∏—è',
          type: 'lesson',
          description: '–†–∞–±–æ—Ç–∞ —Å —Ü–≤–µ—Ç–æ–º –≤ –¥–∏–∑–∞–π–Ω–µ',
          position: { x: 200, y: 250 }
        },
        {
          id: '3',
          title: '–¢–µ—Å—Ç –ø–æ —Ü–≤–µ—Ç–∞–º',
          type: 'quiz',
          description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–æ—Ä–∏–∏',
          position: { x: 200, y: 400 }
        }
      ],
      connections: [
        { id: 'conn1', from: '1', to: '2' },
        { id: 'conn2', from: '2', to: '3' }
      ]
    },
    '3': {
      id: '3',
      title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
      description: '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è Agile –∏ Scrum',
      createdAt: '2024-01-05',
      nodes: [
        {
          id: '1',
          title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ Agile',
          type: 'lesson',
          description: '–û—Å–Ω–æ–≤—ã –≥–∏–±–∫–æ–π –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
          position: { x: 100, y: 100 }
        },
        {
          id: '2',
          title: 'Scrum —Ñ—Ä–µ–π–º–≤–æ—Ä–∫',
          type: 'lesson',
          description: '–ò–∑—É—á–µ–Ω–∏–µ Scrum –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
          position: { x: 300, y: 100 }
        },
        {
          id: '3',
          title: 'Kanban –¥–æ—Å–∫–∞',
          type: 'lesson',
          description: '–†–∞–±–æ—Ç–∞ —Å Kanban –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–µ–π',
          position: { x: 500, y: 100 }
        },
        {
          id: '4',
          title: '–¢–µ—Å—Ç –ø–æ Agile',
          type: 'quiz',
          description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π Agile –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏',
          position: { x: 200, y: 250 }
        },
        {
          id: '5',
          title: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞',
          type: 'assignment',
          description: '–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω —Å–ø—Ä–∏–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞',
          position: { x: 400, y: 250 }
        }
      ],
      connections: [
        { id: 'conn1', from: '1', to: '2' },
        { id: 'conn2', from: '2', to: '3' },
        { id: 'conn3', from: '1', to: '4' },
        { id: 'conn4', from: '3', to: '5' }
      ]
    }
  };

  return courses[courseId] || {
    id: courseId,
    title: `–ö—É—Ä—Å ${courseId}`,
    description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞',
    createdAt: new Date().toISOString(),
    nodes: [],
    connections: []
  };
};

const getNodeTypeIcon = (type: string) => {
  switch (type) {
    case 'lesson': return 'üìö';
    case 'quiz': return '‚ùì';
    case 'assignment': return 'üìù';
    default: return 'üìÑ';
  }
};

const getNodeTypeColor = (type: string) => {
  switch (type) {
    case 'lesson': return 'bg-blue-500';
    case 'quiz': return 'bg-yellow-500';
    case 'assignment': return 'bg-purple-500';
    default: return 'bg-gray-500';
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É–∑–ª–æ–≤ –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
const getSortedNodes = (nodes: CourseNode[], connections: Connection[]): CourseNode[] => {
  // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const graph: Record<string, string[]> = {};
  const inDegree: Record<string, number> = {};
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
  nodes.forEach(node => {
    graph[node.id] = [];
    inDegree[node.id] = 0;
  });
  
  // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ
  connections.forEach(conn => {
    if (graph[conn.from] && inDegree[conn.to] !== undefined) {
      graph[conn.from].push(conn.to);
      inDegree[conn.to]++;
    }
  });
  
  // –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const queue: string[] = [];
  const result: string[] = [];
  
  // –ù–∞—Ö–æ–¥–∏–º —É–∑–ª—ã –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π
  Object.keys(inDegree).forEach(nodeId => {
    if (inDegree[nodeId] === 0) {
      queue.push(nodeId);
    }
  });
  
  while (queue.length > 0) {
    const current = queue.shift()!;
    result.push(current);
    
    graph[current].forEach(neighbor => {
      inDegree[neighbor]--;
      if (inDegree[neighbor] === 0) {
        queue.push(neighbor);
      }
    });
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–∏–∫–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É–∑–ª—ã
  nodes.forEach(node => {
    if (!result.includes(node.id)) {
      result.push(node.id);
    }
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã
  return result.map(id => nodes.find(node => node.id === id)!).filter(Boolean);
};

export default function CoursePage() {
  const router = useRouter();
  const params = useParams();
  const [course, setCourse] = useState<Course | null>(null);
  const [sortedNodes, setSortedNodes] = useState<CourseNode[]>([]);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
    const courseData = getCourseData(params.id as string);
    setCourse(courseData);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É
    const sorted = getSortedNodes(courseData.nodes, courseData.connections);
    setSortedNodes(sorted);
  }, [params.id]);

  if (!course) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-gray-400 text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–∞...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
          <div className="flex justify-between items-start mb-6">
            <div className="flex-1">
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                {course.title}
              </h1>
              <p className="text-gray-600 text-lg mb-4">
                {course.description}
              </p>
              
              <div className="flex items-center gap-6 text-sm text-gray-500">
                <span>üìö {course.nodes.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤</span>
                <span>üîó {course.connections.length} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</span>
                <span>üìÖ –°–æ–∑–¥–∞–Ω {new Date(course.createdAt).toLocaleDateString('ru-RU')}</span>
                <span>üÜî ID: {params.id}</span>
              </div>
            </div>
            
            <div className="flex gap-3">
              <Button
                variant="outline"
                onClick={() => router.push('/courses')}
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º
              </Button>
              <Link href={`/courses/${params.id}/edit`}>
                <Button className="bg-blue-600 hover:bg-blue-700 text-white">
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </Button>
              </Link>
            </div>
          </div>
        </div>

        {/* Course Structure */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">
              –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞
            </h2>
            <p className="text-gray-600 mt-1">
              –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ({sortedNodes.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
            </p>
          </div>
          
          <div className="p-6">
            {sortedNodes.length === 0 ? (
              <div className="text-center py-12">
                <div className="text-gray-400 text-lg mb-2">–ö—É—Ä—Å –ø—É—Å—Ç</div>
                <div className="text-gray-500 text-sm mb-4">
                  –í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                </div>
                <Link href={`/courses/${params.id}/edit`}>
                  <Button className="bg-blue-600 hover:bg-blue-700 text-white">
                    ‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
                  </Button>
                </Link>
              </div>
            ) : (
              <div className="space-y-4">
                {sortedNodes.map((node, index) => (
                  <div
                    key={node.id}
                    className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    <div className="flex-shrink-0 w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-sm font-medium text-gray-600 mr-4">
                      {index + 1}
                    </div>
                    
                    <div className={`flex-shrink-0 w-3 h-3 rounded-full mr-4 ${getNodeTypeColor(node.type)}`}></div>
                    
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="text-lg">{getNodeTypeIcon(node.type)}</span>
                        <h3 className="font-medium text-gray-900">
                          {node.title}
                        </h3>
                      </div>
                      <p className="text-sm text-gray-600">
                        {node.description}
                      </p>
                    </div>
                    
                    <div className="flex-shrink-0">
                      <div className={`px-3 py-1 rounded-full text-xs font-medium text-white ${getNodeTypeColor(node.type)}`}>
                        {node.type === 'lesson' ? '–£—Ä–æ–∫' : 
                         node.type === 'quiz' ? '–¢–µ—Å—Ç' : '–ó–∞–¥–∞–Ω–∏–µ'}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Course Statistics */}
        {course.nodes.length > 0 && (
          <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                    <span className="text-blue-600 text-lg">üìö</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">–£—Ä–æ–∫–∏</p>
                  <p className="text-2xl font-semibold text-gray-900">
                    {course.nodes.filter(n => n.type === 'lesson').length}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <span className="text-yellow-600 text-lg">‚ùì</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">–¢–µ—Å—Ç—ã</p>
                  <p className="text-2xl font-semibold text-gray-900">
                    {course.nodes.filter(n => n.type === 'quiz').length}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                    <span className="text-purple-600 text-lg">üìù</span>
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">–ó–∞–¥–∞–Ω–∏—è</p>
                  <p className="text-2xl font-semibold text-gray-900">
                    {course.nodes.filter(n => n.type === 'assignment').length}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 