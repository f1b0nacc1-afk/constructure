import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const hashedPassword = await bcrypt.hash('password123', 12);

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await Promise.all([
    prisma.user.upsert({
      where: { email: 'admin@constructure.app' },
      update: {},
      create: {
        email: 'admin@constructure.app',
        username: 'admin',
        password: hashedPassword,
        firstName: '–ê–¥–º–∏–Ω',
        lastName: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
        avatar: 'https://ui-avatars.com/api/?name=–ê–¥–º–∏–Ω+–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä&background=6366f1&color=fff',
        verified: true
      }
    }),
    prisma.user.upsert({
      where: { email: 'teacher@constructure.app' },
      update: {},
      create: {
        email: 'teacher@constructure.app',
        username: 'teacher',
        password: hashedPassword,
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å–Ω–∏—Ü–∞',
        avatar: 'https://ui-avatars.com/api/?name=–ú–∞—Ä–∏—è+–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å–Ω–∏—Ü–∞&background=10b981&color=fff',
        verified: true
      }
    }),
    prisma.user.upsert({
      where: { email: 'student@constructure.app' },
      update: {},
      create: {
        email: 'student@constructure.app',
        username: 'student',
        password: hashedPassword,
        firstName: '–ò–≤–∞–Ω',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç–æ–≤',
        avatar: 'https://ui-avatars.com/api/?name=–ò–≤–∞–Ω+–°—Ç—É–¥–µ–Ω—Ç–æ–≤&background=f59e0b&color=fff',
        verified: true
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã
  const courses = await Promise.all([
    prisma.course.upsert({
      where: { id: 'demo-course-1' },
      update: {},
      create: {
        id: 'demo-course-1',
        title: '–û—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        description: '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã HTML, CSS –∏ JavaScript —Å –Ω—É–ª—è. –ö—É—Ä—Å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.',
        thumbnail: 'https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=400&h=300&fit=crop',
        isPublic: true,
        isTemplate: false,
        authorId: users[0].id
      }
    }),
    prisma.course.upsert({
      where: { id: 'demo-course-2' },
      update: {},
      create: {
        id: 'demo-course-2',
        title: 'React –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö',
        description: '–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ React: —Ö—É–∫–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
        thumbnail: 'https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=400&h=300&fit=crop',
        isPublic: true,
        isTemplate: false,
        authorId: users[1].id
      }
    }),
    prisma.course.upsert({
      where: { id: 'demo-course-3' },
      update: {},
      create: {
        id: 'demo-course-3',
        title: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤',
        description: '–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.',
        thumbnail: 'https://images.unsplash.com/photo-1635070041078-e363dbe005cb?w=400&h=300&fit=crop',
        isPublic: false,
        isTemplate: true,
        authorId: users[1].id
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${courses.length} –∫—É—Ä—Å–æ–≤`);

  // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
  const nodes = await Promise.all([
    prisma.courseNode.create({
      data: {
        courseId: courses[0].id,
        type: 'START',
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        content: {
          text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å "–û—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"! –ó–¥–µ—Å—å –≤—ã –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã HTML, CSS –∏ JavaScript.',
          duration: 5
        },
        positions: {
          tree: { x: 100, y: 100 },
          lego: { x: 50, y: 50 },
          mindmap: { x: 200, y: 200 },
          flowchart: { x: 150, y: 100 }
        },
        config: {
          backgroundColor: '#e0f2fe',
          textColor: '#0f172a'
        }
      }
    }),
    prisma.courseNode.create({
      data: {
        courseId: courses[0].id,
        type: 'LESSON',
        title: '–£—Ä–æ–∫ 1: –ß—Ç–æ —Ç–∞–∫–æ–µ HTML?',
        content: {
          text: 'HTML (HyperText Markup Language) - —ç—Ç–æ —è–∑—ã–∫ —Ä–∞–∑–º–µ—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü.',
          videoUrl: 'https://example.com/video1',
          duration: 15
        },
        positions: {
          tree: { x: 300, y: 100 },
          lego: { x: 200, y: 50 },
          mindmap: { x: 400, y: 200 },
          flowchart: { x: 350, y: 100 }
        },
        config: {
          backgroundColor: '#fef3c7',
          textColor: '#0f172a'
        }
      }
    }),
    prisma.courseNode.create({
      data: {
        courseId: courses[0].id,
        type: 'TEST',
        title: '–¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π HTML',
        content: {
          questions: [
            {
              question: '–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç HTML?',
              options: ['HyperText Markup Language', 'Home Tool Markup Language', 'Hyperlinks and Text Markup Language'],
              correct: 0
            },
            {
              question: '–ö–∞–∫–æ–π —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞?',
              options: ['<head>', '<h1>', '<title>'],
              correct: 1
            }
          ],
          passingScore: 80
        },
        positions: {
          tree: { x: 500, y: 100 },
          lego: { x: 350, y: 50 },
          mindmap: { x: 600, y: 200 },
          flowchart: { x: 550, y: 100 }
        },
        config: {
          backgroundColor: '#fce7f3',
          textColor: '#0f172a'
        }
      }
    }),
    prisma.courseNode.create({
      data: {
        courseId: courses[0].id,
        type: 'END',
        title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
        content: {
          text: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ HTML. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–æ–¥—É–ª—é!',
          certificate: true
        },
        positions: {
          tree: { x: 700, y: 100 },
          lego: { x: 500, y: 50 },
          mindmap: { x: 800, y: 200 },
          flowchart: { x: 750, y: 100 }
        },
        config: {
          backgroundColor: '#dcfce7',
          textColor: '#0f172a'
        }
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${nodes.length} —É–∑–ª–æ–≤ –∫—É—Ä—Å–∞`);

  // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
  const edges = await Promise.all([
    prisma.courseEdge.create({
      data: {
        courseId: courses[0].id,
        sourceId: nodes[0].id,
        targetId: nodes[1].id,
        type: 'SEQUENCE',
        label: '–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ',
        style: {
          color: '#3b82f6',
          width: 2
        }
      }
    }),
    prisma.courseEdge.create({
      data: {
        courseId: courses[0].id,
        sourceId: nodes[1].id,
        targetId: nodes[2].id,
        type: 'SEQUENCE',
        label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è',
        style: {
          color: '#10b981',
          width: 2
        }
      }
    }),
    prisma.courseEdge.create({
      data: {
        courseId: courses[0].id,
        sourceId: nodes[2].id,
        targetId: nodes[3].id,
        type: 'CONDITION',
        label: '–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏',
        condition: {
          type: 'test_passed',
          minScore: 80
        },
        style: {
          color: '#f59e0b',
          width: 2,
          style: 'dashed'
        }
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${edges.length} —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —É–∑–ª–∞–º–∏`);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∞–≤—Ç–æ—Ä–æ–≤
  await prisma.courseCollaborator.create({
    data: {
      courseId: courses[0].id,
      userId: users[2].id,
      role: 'VIEWER'
    }
  });

  console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ–∞–≤—Ç–æ—Ä—ã –∫—É—Ä—Å–æ–≤');

  console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
  console.log('\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
  console.log('1. admin@constructure.app - –ø–∞—Ä–æ–ª—å: password123 (–ê–¥–º–∏–Ω)');
  console.log('2. teacher@constructure.app - –ø–∞—Ä–æ–ª—å: password123 (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)');
  console.log('3. student@constructure.app - –ø–∞—Ä–æ–ª—å: password123 (–°—Ç—É–¥–µ–Ω—Ç)');
  console.log('\nüìö –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —Å —É–∑–ª–∞–º–∏ –∏ —Å–≤—è–∑—è–º–∏');
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 